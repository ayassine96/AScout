plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.2.0"
    id 'jacoco'
    id 'org.ajoberstar.github-pages' version '1.7.2'
}

apply plugin: 'java'
apply plugin: 'org.ajoberstar.github-pages'

sonarqube {
    properties {
        property "sonar.projectKey", "ningxie1991_ASE"
        property "sonar.organization", "ningxie"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.tests", "src/test"
        property "sonar.java.test.binaries", "build/classes/java/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacoco {
    toolVersion = "0.8.6"
}

group = 'ifi.ase.ascout'
version = '1.0.0'
sourceCompatibility = '11'
 
repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'io.projectreactor:reactor-test'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.enabled true // coveralls plugin depends on xml format report
        csv.enabled true
        html.enabled = true
    }
}

ext {
    repoPath = 'ningxie1991/AScout'
    ghToken = System.getenv('GH_TOKEN')
}

githubPages {
    if (ghToken) {
        repoUri = "https://github.com/${repoPath}.git"
        credentials {
            username = ghToken
            password = ''
        }
    } else {
        repoUri = "git@github.com:${repoPath}.git"
    }

    pages {
        from(javadoc.outputs.files) {
            into 'docs/javadoc'
        }
    }
}

publishGhPages.dependsOn javadoc